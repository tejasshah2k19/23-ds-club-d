DS -> DSA ->

problem -> solution -> program 

1) space complexity : space taken by program 
2) time complexity  : time taken by program 


algo -> 
    addition 5 numbers -> array:int  

 

for(i=1;i<=n;i++){
    for(j=1;j<=5;j++){
        printf("hi\n");
    }
}
25

1) best case --
2) avg case  --
3) worst case --  big oh O 

program -> 5 12 15 25 
best: 5
avg: XXX 
worst: 25 


 O(log n) => O(n) 

 n*n 
 n^2 
 2 log n 


for(i=1;i<=n;i++){
    for(j=1;j<=n;j++){
        printf("hi\n");
    }
}


n*n-i 
for(i=1;i<=n;i++){
    for(j=1;j<=n-i;j++){
        printf("hi\n");
    }
}


                                 DS 

    Linear                                                  NoN Linear
    array                                                       tree , graph ,hashing     
    statck
    queue 
    linked list 


    sorting 
    searching 
--------------------------------------------------------------------------------------------    



array -> collection of same type of data -> linear ds 
      -> continue 

int a[5];// 0    1     2     3      4 
        // 2000  2004

1d array -> 
    for(i=0;i<5;i++){
        scanf("%d",&a[i]);//0 1 2 3 4 
    }

----------------------------------------------------------
 //ram-> stack  | heap 

void add(){ 
 int x; // 4 byte  - 1500 
 static int y=15; // 4 byte - 2500  
    register int z;
}

int main(){
    add();
    add();
    return 0;
}
----------------------


array -> remove -> rshift 
insert -> if index == 0 no shift 

0 0 0 60 55  


------------------------

searching -> to search an element in the array 

search(int key){
    return index 
    return -1 
}

1)  linear search 
2)  binary search 

-------------------------------
royal -> layor 

reverse the string using stack 

enter the string 
royal 

l 
a
y
o
r

layor 
-----------------------------------------


A:addition
D:delete 
M:multiplication
C:Clear 
S:Subtraction  

12M3D4A5 


[i] : 1 
stack 
1

[i] : 2 
stack 
2
1


[i] : M  {multiplication of stack items {last 2}}
2*1 : 2 
stack:
2 

[i] : 3 
stack:
3
2

[i] : D {delete single item from stack - top of the stack }
stack:
2 

[i] : 4 
stack : 
4
2 


[i] : A [ addition of last two ]
4+2 : 6 
stack : 
6 

[i] : 5 
stack 
5
6 

now your string is over -> perform addition of all items from stack -> 
ans => 11
------------------------------------------------------
		1 : insert at end 			    1 : insert at end 			1 : insert at end 	
		2 : insert at beg			    3 : delete from end 		2 : insert at beg	
		3 : delete from end 			4 : delete from beg			4 : delete from beg	
		4 : delete from beg							
------------------------------------------------------

L
A
Y
O
R

reverse()
R
O
Y
A
L

-------------------------------------------------------------


									












 

  

































































































